// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import "@openzeppelin/contracts/access/Ownable.sol";

import "./lib/BrevisAppZkOnly.sol";

// Only accept ZK-attested results.
contract TokenTransferZkOnly is BrevisAppZkOnly, Ownable {
    event TransferAmountAttested(address account);

    bytes32 public vkHash;

    constructor(address _brevisRequest, address _owner) BrevisAppZkOnly(_brevisRequest) Ownable(_owner) {}

    // BrevisQuery contract will call our callback once Brevis backend submits the proof.
    // This method is called with once the proof is verified.
      function handleProofResult(bytes32 _vkHash, bytes calldata _circuitOutput) internal override {
        // We need to check if the verifying key that Brevis used to verify the proof
        // generated by our circuit is indeed our designated verifying key. This proves
        // that the _circuitOutput is authentic
        require(vkHash == _vkHash, "invalid vk");
        (address accountAddr) = decodeOutput(_circuitOutput);
        emit TransferAmountAttested(accountAddr);
    }


    function decodeOutput(bytes calldata o) internal pure returns (address) {
        address userAddr = address(bytes20(o[0:20]));
        return (userAddr);
    }

    function setVkHash(bytes32 _vkHash) external onlyOwner {
        vkHash = _vkHash;
    }
}
